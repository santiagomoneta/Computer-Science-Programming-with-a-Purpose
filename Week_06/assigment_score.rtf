{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;\f1\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red98\green98\blue98;\red255\green255\blue255;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\cssrgb\c45882\c45882\c45882;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0\c87059;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl336\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 See the Assessment Guide for information on how to interpret this report.\
\
ASSESSMENT SUMMARY\
\
Compilation:  PASSED\
API:          PASSED\
\
Spotbugs:     PASSED\
PMD:          PASSED\
Checkstyle:   FAILED (0 errors, 1 warning)\
\
Correctness:  44/48 tests passed\
Memory:       No tests available for autograding.\
Timing:       No tests available for autograding.\
\
Aggregate score: 92.50%\
[ Compilation: 5%, API: 5%, Style: 0%, Correctness: 90% ]\
\
ASSESSMENT DETAILS\
\
The following files were submitted:\
----------------------------------\
 873 Oct  3 20:47 RecursiveSquares.java\
 764 Oct  3 20:47 RevesPuzzle.java\
 444 Oct  3 20:47 TrinomialBrute.java\
 772 Oct  3 20:47 TrinomialDP.java\
\
\
********************************************************************************\
*  COMPILING                                                                    \
********************************************************************************\
\
\
% javac TrinomialBrute.java\
*-----------------------------------------------------------\
\
% javac TrinomialDP.java\
*-----------------------------------------------------------\
\
% javac RevesPuzzle.java\
*-----------------------------------------------------------\
\
% javac RecursiveSquares.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
Checking the APIs of your programs.\
*-----------------------------------------------------------\
TrinomialBrute:\
\
TrinomialDP:\
\
RevesPuzzle:\
\
RecursiveSquares:\
\
================================================================\
\
\
********************************************************************************\
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       \
********************************************************************************\
\
\
% spotbugs *.class\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
% pmd .\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
% checkstyle *.java\
*-----------------------------------------------------------\
\
% custom checkstyle checks for TrinomialBrute.java\
*-----------------------------------------------------------\
\
% custom checkstyle checks for TrinomialDP.java\
*-----------------------------------------------------------\
\
% custom checkstyle checks for RevesPuzzle.java\
*-----------------------------------------------------------\
\
% custom checkstyle checks for RecursiveSquares.java\
*-----------------------------------------------------------\
[WARN] RecursiveSquares.java:16:24: '2.2' looks like an unnecessary constant. [MagicNumber]\
Checkstyle ends with 0 errors and 1 warning.\
\
\
================================================================\
\
\
********************************************************************************\
*  TESTING CORRECTNESS\
********************************************************************************\
\
Testing correctness of TrinomialBrute\
*-----------------------------------------------------------\
Running 14 total tests.\
\
Test 1: check output format of main()\
  % java TrinomialBrute 3 3\
  1\
\
  % java TrinomialBrute 3 2\
  3\
\
  % java TrinomialBrute 3 1\
  6\
\
  % java TrinomialBrute 3 0\
  7\
\
  % java TrinomialBrute 3 -1\
  6\
\
==> passed\
\
Test 2: check that main() prints correct value for given n and k\
  * n = 3, k = 3\
  * n = 3, k = 2\
  * n = 3, k = 1\
  * n = 3, k = 0\
  * n = 3, k = -1\
==> passed\
\
Test 3: check that main() is consistent with trinomial()\
 * n = 4, |k| <= 4\
 * n = 5, |k| <= 5\
 * n = 6, |k| <= 6\
 * n = 9, |k| <= 9\
==> passed\
\
Test 4: check correctness of trinomial() for n = 1\
  * trinomial(1, 1)\
  * trinomial(1, 0)\
  * trinomial(1, -1)\
==> passed\
\
Test 5: check correctness of trinomial() for n = 2\
  * trinomial(2, 2)\
  * trinomial(2, 1)\
  * trinomial(2, 0)\
  * trinomial(2, -1)\
  * trinomial(2, -2)\
==> passed\
\
Test 6: check correctness of trinomial() for n = 3\
  * trinomial(3, 3)\
  * trinomial(3, 2)\
  * trinomial(3, 1)\
  * trinomial(3, 0)\
  * trinomial(3, -1)\
  * trinomial(3, -2)\
  * trinomial(3, -3)\
==> passed\
\
Test 7: check correctness of trinomial() for k = 0\
  * trinomial(1, 0)\
  * trinomial(2, 0)\
  * trinomial(3, 0)\
  * trinomial(4, 0)\
  * trinomial(5, 0)\
  * trinomial(6, 0)\
  * trinomial(7, 0)\
  * trinomial(8, 0)\
  * trinomial(9, 0)\
==> passed\
\
Test 8: check correctness of trinomial() for fixed n and random k > 0\
  * n = 4, k in [1, 4]\
  * n = 5, k in [1, 5]\
  * n = 6, k in [1, 6]\
  * n = 7, k in [1, 7]\
  * n = 8, k in [1, 8]\
  * n = 9, k in [1, 9]\
==> passed\
\
Test 9: check correctness of trinomial() for fixed n and random k < 0\
  * n = 4, k in [-4, -1]\
  * n = 5, k in [-5, -1]\
  * n = 6, k in [-6, -1]\
  * n = 7, k in [-7, -1]\
  * n = 8, k in [-8, -1]\
  * n = 9, k in [-9, -1]\
==> passed\
\
Test 10: check correctness of trinomial() for n = 0 and k = 0\
  * trinomial(0, 0)\
==> passed\
\
Test 11: check correctness of trinomial() for k > n\
  * n = 1, k in [2, 10]\
  * n = 2, k in [3, 10]\
  * n = 3, k in [4, 10]\
  * n = 4, k in [5, 10]\
  * n in [5, 10], k in [11, 50]\
  * n in [10, 50], k in [51, 100]\
==> passed\
\
Test 12: check correctness of trinomial() for k < -n\
  * n = 1, k in [-10, -2]\
  * n = 2, k in [-10, -3]\
  * n = 3, k in [-10, -4]\
  * n = 4, k in [-10, -5]\
  * n in [5, 10], k in [-50, -11]\
  * n in [10, 50], k in [-100, -51]\
==> passed\
\
Test 13: check that trinomial() returns same value when called with same arguments\
 * n = 3, |k| <= 3\
 * n = 4, |k| <= 4\
 * n = 5, |k| <= 5\
 * n = 9, |k| <= 9\
==> passed\
\
Test 14: check correctness of trinomial() for medium values of n\
  * n = 10, |k| <= 10\
  * n = 11, |k| <= 11\
  * n = 12, |k| <= 12\
  * n = 13, |k| <= 13\
  * n = 14, |k| <= 14\
  * n = 15, |k| <= 15\
  * n = 16, |k| <= 16\
  * n = 17, |k| <= 17\
  * n = 18, |k| <= 18\
==> passed\
\
\
TrinomialBrute Total: 14/14 tests passed!\
\
\
================================================================\
Testing correctness of TrinomialDP\
*-----------------------------------------------------------\
Running 17 total tests.\
\
Test 1: check output format of main()\
  % java TrinomialDP 3 3\
  1\
\
  % java TrinomialDP 3 2\
  3\
\
  % java TrinomialDP 3 1\
  6\
\
  % java TrinomialDP 3 0\
  7\
\
  % java TrinomialDP 3 -1\
  6\
\
==> passed\
\
Test 2: check that main() prints correct value for given n and k\
  * n = 3, k = 3\
  * n = 3, k = 2\
  * n = 3, k = 1\
  * n = 3, k = 0\
  * n = 3, k = -1\
==> passed\
\
Test 3: check that main() is consistent with trinomial()\
 * n = 4, |k| <= 4\
 * n = 5, |k| <= 5\
 * n = 6, |k| <= 6\
 * n = 9, |k| <= 9\
==> passed\
\
Test 4: check correctness of trinomial() for n = 1\
  * trinomial(1, 1)\
  * trinomial(1, 0)\
  * trinomial(1, -1)\
==> passed\
\
Test 5: check correctness of trinomial() for n = 2\
  * trinomial(2, 2)\
  * trinomial(2, 1)\
  * trinomial(2, 0)\
  * trinomial(2, -1)\
  * trinomial(2, -2)\
==> passed\
\
Test 6: check correctness of trinomial() for n = 3\
  * trinomial(3, 3)\
  * trinomial(3, 2)\
  * trinomial(3, 1)\
  * trinomial(3, 0)\
  * trinomial(3, -1)\
  * trinomial(3, -2)\
  * trinomial(3, -3)\
==> passed\
\
Test 7: check correctness of trinomial() for k = 0\
  * trinomial(1, 0)\
  * trinomial(2, 0)\
  * trinomial(3, 0)\
  * trinomial(4, 0)\
  * trinomial(5, 0)\
  * trinomial(6, 0)\
  * trinomial(7, 0)\
  * trinomial(8, 0)\
  * trinomial(9, 0)\
==> passed\
\
Test 8: check correctness of trinomial() for fixed n and random k > 0\
  * n = 4, k in [1, 4]\
  * n = 5, k in [1, 5]\
  * n = 6, k in [1, 6]\
  * n = 7, k in [1, 7]\
  * n = 8, k in [1, 8]\
  * n = 9, k in [1, 9]\
==> passed\
\
Test 9: check correctness of trinomial() for fixed n and random k < 0\
  * n = 4, k in [-4, -1]\
  * n = 5, k in [-5, -1]\
  * n = 6, k in [-6, -1]\
  * n = 7, k in [-7, -1]\
  * n = 8, k in [-8, -1]\
  * n = 9, k in [-9, -1]\
==> passed\
\
Test 10: check correctness of trinomial() for n = 0 and k = 0\
  * trinomial(0, 0)\
==> passed\
\
Test 11: check correctness of trinomial() for k > n\
  * n = 1, k in [2, 10]\
  * n = 2, k in [3, 10]\
  * n = 3, k in [4, 10]\
  * n = 4, k in [5, 10]\
  * n in [5, 10], k in [11, 50]\
  * n in [10, 50], k in [51, 100]\
==> passed\
\
Test 12: check correctness of trinomial() for k < -n\
  * n = 1, k in [-10, -2]\
  * n = 2, k in [-10, -3]\
  * n = 3, k in [-10, -4]\
  * n = 4, k in [-10, -5]\
  * n in [5, 10], k in [-50, -11]\
  * n in [10, 50], k in [-100, -51]\
==> passed\
\
Test 13: check that trinomial() returns same value when called with same arguments\
 * n = 3, |k| <= 3\
 * n = 4, |k| <= 4\
 * n = 5, |k| <= 5\
 * n = 9, |k| <= 9\
==> passed\
\
Test 14: check correctness of trinomial() for medium values of n\
  * n = 10, |k| <= 10\
  * n = 11, |k| <= 11\
  * n = 12, |k| <= 12\
  * n = 13, |k| <= 13\
  * n = 14, |k| <= 14\
  * n = 15, |k| <= 15\
  * n = 16, |k| <= 16\
  * n = 17, |k| <= 17\
  * n = 18, |k| <= 18\
  * n = 19, |k| <= 19\
==> passed\
\
Test 15: check correctness of trinomial() for larger values of n\
  * n = 20, |k| <= 20\
  * n = 21, |k| <= 21\
  * n = 22, |k| <= 22\
  * n = 23, |k| <= 23\
  * n = 24, |k| <= 24\
  * n = 25, |k| <= 25\
  * n = 26, |k| <= 26\
  * n = 27, |k| <= 27\
  * n = 28, |k| <= 28\
  * n = 29, |k| <= 29\
==> passed\
\
Test 16: check correctness of trinomial() for larger values of n\
  * n = 30, |k| <= 30\
  * n = 31, |k| <= 31\
  * n = 32, |k| <= 32\
  * n = 33, |k| <= 33\
  * n = 34, |k| <= 34\
  * n = 35, |k| <= 35\
  * n = 36, |k| <= 36\
  * n = 37, |k| <= 37\
  * n = 38, |k| <= 38\
  * n = 39, |k| <= 39\
==> passed\
\
Test 17: check correctness of trinomial() for large random n and k\
         that don't overflow a long\
  * n in [40, 45]\
  * n in [45, 50]\
  * n in [50, 75]\
  * n in [75, 100]\
  * n in [100, 150]\
  * n in [150, 200]\
  * n in [200, 500]\
==> passed\
\
\
TrinomialDP Total: 17/17 tests passed!\
\
\
================================================================\
Testing correctness of RevesPuzzle\
*-----------------------------------------------------------\
Running 8 total tests.\
\
Test 1: check output format for given values of n\
  % java RevesPuzzle 1\
  Move disc 1 from A to D\
\
  % java RevesPuzzle 2\
  Move disc 1 from A to B\
  Move disc 2 from A to D\
  Move disc 1 from B to D\
\
  % java RevesPuzzle 3\
  Move disc 1 from A to B\
  Move disc 2 from A to C\
  Move disc 3 from A to D\
  Move disc 2 from C to D\
  Move disc 1 from B to D\
\
  % java RevesPuzzle 4\
  Move disc 1 from A to D\
  Move disc 2 from A to B\
  Move disc 1 from D to B\
  Move disc 3 from A to C\
  Move disc 4 from A to D\
  Move disc 3 from C to D\
  Move disc 1 from B to A\
  Move disc 2 from B to D\
  Move disc 1 from A to D\
\
  % java RevesPuzzle 5\
  Move disc 1 from A to D\
  Move disc 2 from A to C\
  Move disc 3 from A to B\
  Move disc 2 from C to B\
  Move disc 1 from D to B\
  Move disc 4 from A to C\
  Move disc 5 from A to D\
  Move disc 4 from C to D\
  Move disc 1 from B to A\
  Move disc 2 from B to C\
  Move disc 3 from B to D\
  Move disc 2 from C to D\
  Move disc 1 from A to D\
\
==> passed\
\
Test 2: check that output is a valid sequence of moves, ending in goal state\
  * n = 1\
  * n = 2\
  * n = 3\
  * n = 4\
  * n = 5\
==> passed\
\
Test 3: check that output is a valid sequence of moves, ending in goal state\
  * n = 6\
  * n = 7\
  * n = 8\
  * n = 9\
  * n = 10\
==> passed\
\
Test 4: check that output uses a minimum number of moves\
  * n = 1\
  * n = 2\
  * n = 3\
  * n = 4\
  * n = 5\
==> passed\
\
Test 5: check that output uses a minimum number of moves\
  * n = 6\
  * n = 7\
  * n = 8\
  * n = 9\
  * n = 10\
==> passed\
\
Test 6: check that output is correct for given values of n\
  * n = 11\
  * n = 12\
  * n = 13\
  * n = 14\
  * n = 15\
==> passed\
\
Test 7: check that output is correct for a range of values of n\
  * n = [16, 20)\
  * n = [20, 30)\
  * n = [30, 50)\
  * n = [50, 75)\
==> passed\
\
Test 8: check program outputs the same results when called with same value for n\
  * java RevesPuzzle 4 [ twice ]\
  * java RevesPuzzle 5 [ twice ]\
  * java RevesPuzzle 6 [ twice ]\
==> passed\
\
\
RevesPuzzle Total: 8/8 tests passed!\
\
\
================================================================\
Testing correctness of RecursiveSquares\
*-----------------------------------------------------------\
Running 9 total tests.\
\
Test 1: check that main() uses neither standard input nor standard output\
  % java RecursiveSquares 1\
  [no output]\
\
  % java RecursiveSquares 2\
  [no output]\
\
  % java RecursiveSquares 3\
  [no output]\
\
  % java RecursiveSquares 4\
  [no output]\
\
  % java RecursiveSquares 5\
  [no output]\
\
  % java RecursiveSquares 6\
  [no output]\
\
==> passed\
\
Test 2: check that main() calls only allowable standard draw methods\
  * java RecursiveSquares 1\
  * java RecursiveSquares 2\
  * java RecursiveSquares 3\
  * java RecursiveSquares 4\
  * java RecursiveSquares 5\
  * java RecursiveSquares 6\
==> passed\
\
Test 3: check drawSquare() with fixed arguments\
  * drawSquare(0.5, 0.5, 0.5)\
  * drawSquare(0.75, 0.25, 0.25)\
  * drawSquare(0.25, 0.75, 0.25)\
  * drawSquare(0.625, 0.875, 0.125)\
  * drawSquare(0.8125, 0.6875, 0.0625)\
==> passed\
\
Test 4: check drawSquare() with random arguments\
  * calling drawSquare() with x, y, and length in [0.0, 1.0]\
  * calling drawSquare() with x, y, and length in [0.0, 10.0]\
  * calling drawSquare() with x, y, and length in [-10.0, 10.0]\
==> passed\
\
Test 5: check that draw() draws the correct set of squares for fixed arguments\
  * draw(1, 0.5, 0.5, 0.5)\
  * draw(1, 0.75, 0.25, 0.25)\
  * draw(1, 0.25, 0.75, 0.25)\
  * draw(1, 0.625, 0.875, 0.125)\
  * draw(2, 0.5, 0.5, 0.5)\
    - number of entries in student   solution: 5\
    - number of entries in reference solution: 5\
    - 4 extra entries in student solution, including:\
      shape = filled square; vertices = [(0.63636, 0.63636), (0.63636, 0.86364), (0.86364, 0.86364), (0.86364, 0.63636)]; color = light gray\
    - 4 missing entries in student solution, including:\
      shape = filled square; vertices = [(0.625, 0.625), (0.625, 0.875), (0.875, 0.875), (0.875, 0.625)]; color = light gray\
\
    - draws wrong set of filled squares\
\
  * draw(2, 0.75, 0.25, 0.25)\
    - number of entries in student   solution: 5\
    - number of entries in reference solution: 5\
    - 4 extra entries in student solution, including:\
      shape = filled square; vertices = [(0.81818, 0.31818), (0.81818, 0.43182), (0.93182, 0.43182), (0.93182, 0.31818)]; color = light gray\
    - 4 missing entries in student solution, including:\
      shape = filled square; vertices = [(0.8125, 0.3125), (0.8125, 0.4375), (0.9375, 0.4375), (0.9375, 0.3125)]; color = light gray\
\
    - draws wrong set of filled squares\
\
  * draw(3, 0.25, 0.75, 0.25)\
    - number of entries in student   solution: 21\
    - number of entries in reference solution: 21\
    - 20 extra entries in student solution, including:\
      shape = filled square; vertices = [(0.40599, 0.90599), (0.40599, 0.95764), (0.45764, 0.95764), (0.45764, 0.90599)]; color = light gray\
    - 20 missing entries in student solution, including:\
      shape = filled square; vertices = [(0.40625, 0.90625), (0.40625, 0.96875), (0.46875, 0.96875), (0.46875, 0.90625)]; color = light gray\
\
    - draws wrong set of filled squares\
\
==> FAILED\
\
Test 6: check that draw() draws the correct set of squares for random arguments\
  * calling draw() with n = 1 and x, y, and length in [0.0, 1.0]\
  * calling draw() with n = 2 and x, y, and length in [0.0, 1.0]\
    - number of entries in student   solution: 5\
    - number of entries in reference solution: 5\
    - 4 extra entries in student solution, including:\
      shape = filled rectangle; vertices = [(0.77273, 0.52273), (0.77273, 0.97727), (1.2273, 0.97727), (1.2273, 0.52273)]; color = light gray\
    - 4 missing entries in student solution, including:\
      shape = filled square; vertices = [(0.75, 0.5), (0.75, 1.0), (1.25, 1.0), (1.25, 0.5)]; color = light gray\
\
    - draws wrong set of filled squares\
\
    - failed on trial 1 of 100\
    - calling draw(2, 0.5, 0.25, 1.0)\
\
  * calling draw() with n = 1 and x, y, and length in [0.0, 10.0]\
  * calling draw() with n = 3 and x, y, and length in [-10.0, 10.0]\
    - number of entries in student   solution: 21\
    - number of entries in reference solution: 21\
    - 20 extra entries in student solution, including:\
      shape = filled square; vertices = [(-6.9721, -5.9721), (-6.9721, -5.3006), (-6.3006, -5.3006), (-6.3006, -5.9721)]; color = light gray\
    - 20 missing entries in student solution, including:\
      shape = filled square; vertices = [(-6.9688, -5.9688), (-6.9688, -5.1563), (-6.1563, -5.1563), (-6.1563, -5.9688)]; color = light gray\
\
    - draws wrong set of filled squares\
\
    - failed on trial 1 of 100\
    - calling draw(3, -9.0, -8.0, 3.25)\
\
==> FAILED\
\
Test 7: check that main() is consistent with draw(n, 0.5, 0.5, 0.5)\
  * n = 1\
  * n = 2\
  * n = 3\
  * n = 4\
  * n = 5\
  * n = 6\
==> passed\
\
Test 8: check that main() draws the correct set of squares\
  * java RecursiveSquares 1\
  * java RecursiveSquares 2\
    - number of entries in student   solution: 5\
    - number of entries in reference solution: 5\
    - 4 extra entries in student solution, including:\
      shape = filled square; vertices = [(0.63636, 0.63636), (0.63636, 0.86364), (0.86364, 0.86364), (0.86364, 0.63636)]; color = light gray\
    - 4 missing entries in student solution, including:\
      shape = filled square; vertices = [(0.625, 0.625), (0.625, 0.875), (0.875, 0.875), (0.875, 0.625)]; color = light gray\
\
    - draws wrong set of filled squares\
\
    - number of entries in student   solution: 5\
    - number of entries in reference solution: 5\
    - 4 extra entries in student solution, including:\
      shape = square; vertices = [(0.63636, 0.63636), (0.63636, 0.86364), (0.86364, 0.86364), (0.86364, 0.63636)]; color = black\
    - 4 missing entries in student solution, including:\
      shape = square; vertices = [(0.625, 0.625), (0.625, 0.875), (0.875, 0.875), (0.875, 0.625)]; color = black\
\
    - draws wrong set of outline squares\
\
  * java RecursiveSquares 3\
    - number of entries in student   solution: 21\
    - number of entries in reference solution: 21\
    - 20 extra entries in student solution, including:\
      shape = filled square; vertices = [(0.81198, 0.81198), (0.81198, 0.91529), (0.91529, 0.91529), (0.91529, 0.81198)]; color = light gray\
    - 20 missing entries in student solution, including:\
      shape = filled square; vertices = [(0.8125, 0.8125), (0.8125, 0.9375), (0.9375, 0.9375), (0.9375, 0.8125)]; color = light gray\
\
    - draws wrong set of filled squares\
\
    - number of entries in student   solution: 21\
    - number of entries in reference solution: 21\
    - 20 extra entries in student solution, including:\
      shape = square; vertices = [(0.81198, 0.81198), (0.81198, 0.91529), (0.91529, 0.91529), (0.91529, 0.81198)]; color = black\
    - 20 missing entries in student solution, including:\
      shape = square; vertices = [(0.8125, 0.8125), (0.8125, 0.9375), (0.9375, 0.9375), (0.9375, 0.8125)]; color = black\
\
    - draws wrong set of outline squares\
\
  * java RecursiveSquares 4\
    - number of entries in student   solution: 85\
    - number of entries in reference solution: 85\
    - 84 extra entries in student solution, including:\
      shape = filled square; vertices = [(0.89181, 0.89181), (0.89181, 0.93877), (0.93877, 0.93877), (0.93877, 0.89181)]; color = light gray\
    - 84 missing entries in student solution, including:\
      shape = filled square; vertices = [(0.90625, 0.90625), (0.90625, 0.96875), (0.96875, 0.96875), (0.96875, 0.90625)]; color = light gray\
\
    - draws wrong set of filled squares\
\
    - number of entries in student   solution: 85\
    - number of entries in reference solution: 85\
    - 84 extra entries in student solution, including:\
      shape = square; vertices = [(0.89181, 0.89181), (0.89181, 0.93877), (0.93877, 0.93877), (0.93877, 0.89181)]; color = black\
    - 84 missing entries in student solution, including:\
      shape = square; vertices = [(0.90625, 0.90625), (0.90625, 0.96875), (0.96875, 0.96875), (0.96875, 0.90625)]; color = black\
\
    - draws wrong set of outline squares\
\
  * java RecursiveSquares 5\
    - number of entries in student   solution: 341\
    - number of entries in reference solution: 341\
    - 340 extra entries in student solution, including:\
      shape = filled square; vertices = [(0.9281, 0.9281), (0.9281, 0.94944), (0.94944, 0.94944), (0.94944, 0.9281)]; color = light gray\
    - 340 missing entries in student solution, including:\
      shape = filled square; vertices = [(0.95313, 0.95313), (0.95313, 0.98438), (0.98438, 0.98438), (0.98438, 0.95313)]; color = light gray\
\
    - draws wrong set of filled squares\
\
    - number of entries in student   solution: 341\
    - number of entries in reference solution: 341\
    - 340 extra entries in student solution, including:\
      shape = square; vertices = [(0.9281, 0.9281), (0.9281, 0.94944), (0.94944, 0.94944), (0.94944, 0.9281)]; color = black\
    - 340 missing entries in student solution, including:\
      shape = square; vertices = [(0.95313, 0.95313), (0.95313, 0.98438), (0.98438, 0.98438), (0.98438, 0.95313)]; color = black\
\
    - draws wrong set of outline squares\
\
  * java RecursiveSquares 6\
    - number of entries in student   solution: 1365\
    - number of entries in reference solution: 1365\
    - 1364 extra entries in student solution, including:\
      shape = filled square; vertices = [(0.94459, 0.94459), (0.94459, 0.95429), (0.95429, 0.95429), (0.95429, 0.94459)]; color = light gray\
    - 1364 missing entries in student solution, including:\
      shape = filled square; vertices = [(0.97656, 0.97656), (0.97656, 0.99219), (0.99219, 0.99219), (0.99219, 0.97656)]; color = light gray\
\
    - draws wrong set of filled squares\
\
    - number of entries in student   solution: 1365\
    - number of entries in reference solution: 1365\
    - 1364 extra entries in student solution, including:\
      shape = square; vertices = [(0.94459, 0.94459), (0.94459, 0.95429), (0.95429, 0.95429), (0.95429, 0.94459)]; color = black\
    - 1364 missing entries in student solution, including:\
      shape = square; vertices = [(0.97656, 0.97656), (0.97656, 0.99219), (0.99219, 0.99219), (0.99219, 0.97656)]; color = black\
\
    - draws wrong set of outline squares\
\
==> FAILED\
\
Test 9: check that main() draws correct squares in correct order\
  * java RecursiveSquares 1\
  * java RecursiveSquares 2\
    - number of entries in student   solution: 5\
    - number of entries in reference solution: 5\
    - 4 extra entries in student solution, including:\
      shape = filled square; vertices = [(0.63636, 0.63636), (0.63636, 0.86364), (0.86364, 0.86364), (0.86364, 0.63636)]; color = light gray\
    - 4 missing entries in student solution, including:\
      shape = filled square; vertices = [(0.625, 0.625), (0.625, 0.875), (0.875, 0.875), (0.875, 0.625)]; color = light gray\
\
    - draws wrong set of filled squares\
\
  * java RecursiveSquares 3\
    - number of entries in student   solution: 21\
    - number of entries in reference solution: 21\
    - 20 extra entries in student solution, including:\
      shape = filled square; vertices = [(0.81198, 0.81198), (0.81198, 0.91529), (0.91529, 0.91529), (0.91529, 0.81198)]; color = light gray\
    - 20 missing entries in student solution, including:\
      shape = filled square; vertices = [(0.8125, 0.8125), (0.8125, 0.9375), (0.9375, 0.9375), (0.9375, 0.8125)]; color = light gray\
\
    - draws wrong set of filled squares\
\
  * java RecursiveSquares 4\
    - number of entries in student   solution: 85\
    - number of entries in reference solution: 85\
    - 84 extra entries in student solution, including:\
      shape = filled square; vertices = [(0.89181, 0.89181), (0.89181, 0.93877), (0.93877, 0.93877), (0.93877, 0.89181)]; color = light gray\
    - 84 missing entries in student solution, including:\
      shape = filled square; vertices = [(0.90625, 0.90625), (0.90625, 0.96875), (0.96875, 0.96875), (0.96875, 0.90625)]; color = light gray\
\
    - draws wrong set of filled squares\
\
  * java RecursiveSquares 5\
    - number of entries in student   solution: 341\
    - number of entries in reference solution: 341\
    - 340 extra entries in student solution, including:\
      shape = filled square; vertices = [(0.9281, 0.9281), (0.9281, 0.94944), (0.94944, 0.94944), (0.94944, 0.9281)]; color = light gray\
    - 340 missing entries in student solution, including:\
      shape = filled square; vertices = [(0.95313, 0.95313), (0.95313, 0.98438), (0.98438, 0.98438), (0.98438, 0.95313)]; color = light gray\
\
    - draws wrong set of filled squares\
\
  * java RecursiveSquares 6\
    - number of entries in student   solution: 1365\
    - number of entries in reference solution: 1365\
    - 1364 extra entries in student solution, including:\
      shape = filled square; vertices = [(0.94459, 0.94459), (0.94459, 0.95429), (0.95429, 0.95429), (0.95429, 0.94459)]; color = light gray\
    - 1364 missing entries in student solution, including:\
      shape = filled square; vertices = [(0.97656, 0.97656), (0.97656, 0.99219), (0.99219, 0.99219), (0.99219, 0.97656)]; color = light gray\
\
    - draws wrong set of filled squares\
\
==> FAILED\
\
\
RecursiveSquares Total: 5/9 tests passed!\
\
\
================================================================\
\
\pard\pardeftab720\partightenfactor0

\f1\fs28 \cf4 \cb1 \strokec4 \
}