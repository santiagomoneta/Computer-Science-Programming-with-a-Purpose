{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fmodern\fcharset0 Courier;}
{\colortbl;\red255\green255\blue255;\red98\green98\blue98;\red255\green255\blue255;}
{\*\expandedcolortbl;;\cssrgb\c45882\c45882\c45882;\cssrgb\c100000\c100000\c100000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 See the Assessment Guide for information on how to interpret this report.\
\
ASSESSMENT SUMMARY\
\
Compilation:  PASSED\
API:          FAILED (1 error)\
\
Spotbugs:     PASSED\
PMD:          PASSED\
Checkstyle:   FAILED (0 errors, 30 warnings)\
\
Correctness:  34/40 tests passed\
Memory:       No tests available for autograding.\
Timing:       No tests available for autograding.\
\
Aggregate score: 81.50%\
[ Compilation: 5%, API: 5%, Style: 0%, Correctness: 90% ]\
\
ASSESSMENT DETAILS\
\
The following files were submitted:\
----------------------------------\
1.6K Oct 10 17:19 Huntingtons.java\
 18K Oct 10 17:19 KernelFilter.java\
\
\
********************************************************************************\
*  COMPILING                                                                    \
********************************************************************************\
\
\
% javac Huntingtons.java\
*-----------------------------------------------------------\
\
% javac KernelFilter.java\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
Checking the APIs of your programs.\
*-----------------------------------------------------------\
Huntingtons:\
\
KernelFilter:\
The following methods are missing:\
  * public static Picture identity(Picture)\
\
\
================================================================\
\
\
********************************************************************************\
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       \
********************************************************************************\
\
\
% spotbugs *.class\
*-----------------------------------------------------------\
M D IM_BAD_CHECK_FOR_ODD IM: Uses an expression like 'x % 2 == 1' to check whether an integer is odd, but this won't work for negative integers. Instead, use an expression like 'x % 2 != 0'.  At KernelFilter.java:[line 56]\
M D IM_BAD_CHECK_FOR_ODD IM: Uses an expression like 'x % 2 == 1' to check whether an integer is odd, but this won't work for negative integers. Instead, use an expression like 'x % 2 != 0'.  At KernelFilter.java:[line 158]\
\
\
================================================================\
\
\
% pmd .\
*-----------------------------------------------------------\
\
\
================================================================\
\
\
% checkstyle *.java\
*-----------------------------------------------------------\
[WARN] Huntingtons.java:49:11: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]\
[WARN] KernelFilter.java:17:9: 'for' is not followed by whitespace. [WhitespaceAfter]\
[WARN] KernelFilter.java:51:20: The local variable 'Gaussian' must start with a lowercase letter and use camelCase. [LocalVariableName]\
[WARN] KernelFilter.java:69:59: '++' is preceded with whitespace. [NoWhitespaceBefore]\
[WARN] KernelFilter.java:85:21: The local variable 'R' must start with a lowercase letter and use camelCase. [LocalVariableName]\
[WARN] KernelFilter.java:87:21: The local variable 'B' must start with a lowercase letter and use camelCase. [LocalVariableName]\
[WARN] KernelFilter.java:117:9: 'for' is not followed by whitespace. [WhitespaceAfter]\
[WARN] KernelFilter.java:153:20: The local variable 'Sharpen' must start with a lowercase letter and use camelCase. [LocalVariableName]\
[WARN] KernelFilter.java:170:59: '++' is preceded with whitespace. [NoWhitespaceBefore]\
[WARN] KernelFilter.java:186:21: The local variable 'R' must start with a lowercase letter and use camelCase. [LocalVariableName]\
[WARN] KernelFilter.java:188:21: The local variable 'B' must start with a lowercase letter and use camelCase. [LocalVariableName]\
[WARN] KernelFilter.java:217:9: 'for' is not followed by whitespace. [WhitespaceAfter]\
[WARN] KernelFilter.java:251:20: The local variable 'Laplacian' must start with a lowercase letter and use camelCase. [LocalVariableName]\
[WARN] KernelFilter.java:266:59: '++' is preceded with whitespace. [NoWhitespaceBefore]\
[WARN] KernelFilter.java:281:21: The local variable 'R' must start with a lowercase letter and use camelCase. [LocalVariableName]\
[WARN] KernelFilter.java:283:21: The local variable 'B' must start with a lowercase letter and use camelCase. [LocalVariableName]\
[WARN] KernelFilter.java:313:13: 'for' is not followed by whitespace. [WhitespaceAfter]\
[WARN] KernelFilter.java:345:24: The local variable 'Emboss' must start with a lowercase letter and use camelCase. [LocalVariableName]\
[WARN] KernelFilter.java:354:24: '(' is followed by whitespace. [ParenPad]\
[WARN] KernelFilter.java:365:63: '++' is preceded with whitespace. [NoWhitespaceBefore]\
[WARN] KernelFilter.java:381:25: The local variable 'R' must start with a lowercase letter and use camelCase. [LocalVariableName]\
[WARN] KernelFilter.java:383:25: The local variable 'B' must start with a lowercase letter and use camelCase. [LocalVariableName]\
[WARN] KernelFilter.java:422:9: 'for' is not followed by whitespace. [WhitespaceAfter]\
[WARN] KernelFilter.java:449:20: The local variable 'MotionBlur' must start with a lowercase letter and use camelCase. [LocalVariableName]\
[WARN] KernelFilter.java:454:20: '(' is followed by whitespace. [ParenPad]\
[WARN] KernelFilter.java:465:59: '++' is preceded with whitespace. [NoWhitespaceBefore]\
[WARN] KernelFilter.java:480:21: The local variable 'R' must start with a lowercase letter and use camelCase. [LocalVariableName]\
[WARN] KernelFilter.java:482:21: The local variable 'B' must start with a lowercase letter and use camelCase. [LocalVariableName]\
Checkstyle ends with 0 errors and 28 warnings.\
\
% custom checkstyle checks for Huntingtons.java\
*-----------------------------------------------------------\
\
% custom checkstyle checks for KernelFilter.java\
*-----------------------------------------------------------\
[WARN] KernelFilter.java:467:30: '-4' looks like an unnecessary constant. [MagicNumber]\
[WARN] KernelFilter.java:469:34: '-4' looks like an unnecessary constant. [MagicNumber]\
Checkstyle ends with 0 errors and 2 warnings.\
\
\
================================================================\
\
\
********************************************************************************\
*  TESTING CORRECTNESS\
********************************************************************************\
\
Testing correctness of Huntingtons\
*-----------------------------------------------------------\
Running 10 total tests.\
\
Test 1: check output format of main() for inputs from assignment specification\
  % java-introcs Huntingtons repeats4.txt\
  max repeats = 4\
  not human\
\
  % java-introcs Huntingtons repeats64.txt\
  max repeats = 64\
  Huntington's\
\
  % java-introcs Huntingtons chromosome4-hd.txt\
  max repeats = 79\
  Huntington's\
\
  % java-introcs Huntingtons chromosome4-healthy.txt\
  max repeats = 19\
  normal\
\
==> passed\
\
Test 2: check correctness of main() for inputs from assignment specification\
  % java-introcs Huntingtons repeats4.txt\
  % java-introcs Huntingtons repeats64.txt\
  % java-introcs Huntingtons chromosome4-hd.txt\
  % java-introcs Huntingtons chromosome4-healthy.txt\
==> passed\
\
Test 3: check maxRepeats() for DNA from files (with whitespace removed)\
  * file = repeats0.txt\
  * file = repeats2.txt\
  * file = repeats4.txt\
  * file = repeats9.txt\
  * file = repeats10.txt\
  * file = repeats12.txt\
  * file = repeats35.txt\
  * file = repeats36.txt\
  * file = repeats39.txt\
  * file = repeats40.txt\
  * file = repeats64.txt\
  * file = repeats180.txt\
  * file = repeats181.txt\
==> passed\
\
Test 4: check maxRepeats() for DNA from files (with whitespace removed)\
  * file = chromosome4-hd.txt\
  * file = chromosome4-healthy.txt\
==> passed\
\
Test 5: check maxRepeats() for random DNA of length n\
  * 10000 random strings of length 10\
  * 10000 random strings of length 20\
  * 10000 random strings of length 30\
  * 10000 random strings of length 100\
  * 10000 random strings of length 200\
  * 10000 random strings of length 500\
==> passed\
\
Test 6: check removeWhitespace() for inputs from files\
  * file = repeats0.txt\
  * file = repeats2.txt\
  * file = repeats4.txt\
  * file = repeats9.txt\
  * file = repeats10.txt\
  * file = repeats12.txt\
  * file = repeats35.txt\
  * file = repeats36.txt\
  * file = repeats39.txt\
  * file = repeats40.txt\
  * file = repeats64.txt\
  * file = repeats180.txt\
  * file = repeats181.txt\
==> passed\
\
Test 7: check removeWhitespace() for DNA from files\
  * file = chromosome4-hd.txt\
  * file = chromosome4-healthy.txt\
==> passed\
\
Test 8: check maxRepeats() for random DNA of length n\
  * 10000 random strings of length 10 over alphabet \{ 'A', 'C', 'G', 'T' \}\
  * 10000 random strings of length 10 over alphabet \{ 'A', 'C', 'G', 'T', ' ' \}\
  * 10000 random strings of length 10 over alphabet \{ 'A', 'C', 'G', 'T', ' ', '\\n' \}\
  * 10000 random strings of length 10 over alphabet \{ 'A', 'C', 'G', 'T', ' ', '\\n', '\\t' \}\
  * 10000 random strings of length 20 over alphabet \{ 'A', 'C', 'G', 'T' \}\
  * 10000 random strings of length 20 over alphabet \{ 'A', 'C', 'G', 'T', ' ' \}\
  * 10000 random strings of length 20 over alphabet \{ 'A', 'C', 'G', 'T', ' ', '\\n' \}\
  * 10000 random strings of length 20 over alphabet \{ 'A', 'C', 'G', 'T', ' ', '\\n', '\\t' \}\
  * 10000 random strings of length 100 over alphabet \{ 'A', 'C', 'G', 'T' \}\
  * 10000 random strings of length 100 over alphabet \{ 'A', 'C', 'G', 'T', ' ' \}\
  * 10000 random strings of length 100 over alphabet \{ 'A', 'C', 'G', 'T', ' ', '\\n' \}\
  * 10000 random strings of length 100 over alphabet \{ 'A', 'C', 'G', 'T', ' ', '\\n', '\\t' \}\
==> passed\
\
Test 9: check diagnose() for given value of maxRepeats\
  * maxRepeats = 0\
  * maxRepeats = 9\
  * maxRepeats = 10\
  * maxRepeats = 35\
  * maxRepeats = 36\
  * maxRepeats = 39\
  * maxRepeats = 40\
  * maxRepeats = 180\
  * maxRepeats = 181\
==> passed\
\
Test 10: check diagnose() for range of values of maxRepeats\
  * 0 to 9\
  * 10 to 35\
  * 36 to 39\
  * 40 to 180\
  * 180 to 1000\
==> passed\
\
\
Huntingtons Total: 10/10 tests passed!\
\
\
================================================================\
Testing correctness of KernelFilter\
*-----------------------------------------------------------\
Running 30 total tests.\
\
Test 1: check correctness of identity() for given grayscale PNG files\
[ aborting test since identity() method not properly defined ]\
==> FAILED\
\
Test 2: check correctness of identity() for given color PNG files\
[ aborting test since identity() method not properly defined ]\
==> FAILED\
\
Test 3: check correctness of identity() for random grayscale pictures\
[ aborting test since identity() method not properly defined ]\
==> FAILED\
\
Test 4: check correctness of identity() for random color pictures\
[ aborting test since identity() method not properly defined ]\
==> FAILED\
\
Test 5: check correctness of gaussian() for given grayscale PNG files\
  * 6-by-5.png\
  * baboon-gray.png\
  * sunflowers-gray.png\
  * earth-gray.png\
  * penguins-gray.png\
==> passed\
\
Test 6: check correctness of gaussian() for given color PNG files\
  * baboon.png\
  * baboon-red.png\
  * baboon-green.png\
  * baboon-blue.png\
  * sunflowers.png\
  * earth.png\
  * penguins.png\
==> passed\
\
Test 7: check correctness of gaussian() for random grayscale pictures\
  * 1000 random 9-by-9 grayscale images\
  * 1000 random 5-by-8 grayscale images\
  * 1000 random 7-by-6 grayscale images\
  * 1000 random 1-by-8 grayscale images\
  * 1000 random 8-by-1 grayscale images\
  * 1000 random 1-by-1 grayscale images\
==> passed\
\
Test 8: check correctness of gaussian() for random color pictures\
  * 1000 random 10-by-10 color images\
  * 1000 random 12-by-17 color images\
  * 1000 random 16-by-13 color images\
==> passed\
\
Test 9: check correctness of sharpen() for given grayscale PNG files\
  * 6-by-5.png\
  * baboon-gray.png\
  * sunflowers-gray.png\
  * earth-gray.png\
  * penguins-gray.png\
==> passed\
\
Test 10: check correctness of sharpen() for given color PNG files\
  * baboon.png\
  * baboon-red.png\
  * baboon-green.png\
  * baboon-blue.png\
  * sunflowers.png\
  * earth.png\
  * penguins.png\
==> passed\
\
Test 11: check correctness of sharpen() for random grayscale pictures\
  * 1000 random 9-by-9 grayscale images\
  * 1000 random 5-by-8 grayscale images\
  * 1000 random 7-by-6 grayscale images\
  * 1000 random 1-by-8 grayscale images\
  * 1000 random 8-by-1 grayscale images\
  * 1000 random 1-by-1 grayscale images\
==> passed\
\
Test 12: check correctness of sharpen() for random color pictures\
  * 1000 random 10-by-10 color images\
  * 1000 random 12-by-17 color images\
  * 1000 random 16-by-13 color images\
==> passed\
\
Test 13: check correctness of laplacian() for given grayscale PNG files\
  * 6-by-5.png\
  * baboon-gray.png\
  * sunflowers-gray.png\
  * earth-gray.png\
  * penguins-gray.png\
==> passed\
\
Test 14: check correctness of laplacian() for given color PNG files\
  * baboon.png\
  * baboon-red.png\
  * baboon-green.png\
  * baboon-blue.png\
  * sunflowers.png\
  * earth.png\
  * penguins.png\
==> passed\
\
Test 15: check correctness of laplacian() for random grayscale pictures\
  * 1000 random 9-by-9 grayscale images\
  * 1000 random 5-by-8 grayscale images\
  * 1000 random 7-by-6 grayscale images\
  * 1000 random 1-by-8 grayscale images\
  * 1000 random 8-by-1 grayscale images\
  * 1000 random 1-by-1 grayscale images\
==> passed\
\
Test 16: check correctness of laplacian() for random color pictures\
  * 1000 random 10-by-10 color images\
  * 1000 random 12-by-17 color images\
  * 1000 random 16-by-13 color images\
==> passed\
\
Test 17: check correctness of emboss() for given grayscale PNG files\
  * 6-by-5.png\
  * baboon-gray.png\
  * sunflowers-gray.png\
  * earth-gray.png\
  * penguins-gray.png\
==> passed\
\
Test 18: check correctness of emboss() for given color PNG files\
  * baboon.png\
  * baboon-red.png\
  * baboon-green.png\
  * baboon-blue.png\
  * sunflowers.png\
  * earth.png\
  * penguins.png\
==> passed\
\
Test 19: check correctness of emboss() for random grayscale pictures\
  * 1000 random 9-by-9 grayscale images\
  * 1000 random 5-by-8 grayscale images\
  * 1000 random 7-by-6 grayscale images\
  * 1000 random 1-by-8 grayscale images\
  * 1000 random 8-by-1 grayscale images\
  * 1000 random 1-by-1 grayscale images\
==> passed\
\
Test 20: check correctness of emboss() for random color pictures\
  * 1000 random 10-by-10 color images\
  * 1000 random 12-by-17 color images\
  * 1000 random 16-by-13 color images\
==> passed\
\
Test 21: check correctness of motionBlur() for given grayscale PNG files\
  * 6-by-5.png\
  * baboon-gray.png\
  * sunflowers-gray.png\
  * earth-gray.png\
  * penguins-gray.png\
==> passed\
\
Test 22: check correctness of motionBlur() for given color PNG files\
  * baboon.png\
  * baboon-red.png\
  * baboon-green.png\
  * baboon-blue.png\
  * sunflowers.png\
  * earth.png\
  * penguins.png\
==> passed\
\
Test 23: check correctness of motionBlur() for random grayscale pictures\
  * 1000 random 9-by-9 grayscale images\
  * 1000 random 5-by-8 grayscale images\
  * 1000 random 7-by-6 grayscale images\
  * 1000 random 1-by-8 grayscale images\
    - motionBlur() returns wrong color for boundary pixel (0, 0)\
    - student   color = (110, 110, 110)\
    - reference color = (169, 169, 169)\
    - failed on trial 1 of 1000\
\
  * 1000 random 8-by-1 grayscale images\
    - motionBlur() returns wrong color for boundary pixel (0, 0)\
    - student   color = (97, 97, 97)\
    - reference color = (153, 153, 153)\
    - failed on trial 1 of 1000\
\
  * 1000 random 1-by-1 grayscale images\
    - motionBlur() returns wrong color for boundary pixel (0, 0)\
    - student   color = (15, 15, 15)\
    - reference color = (23, 23, 23)\
    - failed on trial 1 of 1000\
\
==> FAILED\
\
Test 24: check correctness of motionBlur() for random color pictures\
  * 1000 random 10-by-10 color images\
  * 1000 random 12-by-17 color images\
  * 1000 random 16-by-13 color images\
==> passed\
\
Test 25: check that identity() does not mutate Picture argument\
[ aborting test since identity() method not properly defined ]\
==> FAILED\
\
Test 26: check that gaussian() does not mutate Picture argument\
  * baboon.png\
  * sunflowers.png\
  * earth.png\
  * penguins.png\
==> passed\
\
Test 27: check that sharpen() does not mutate Picture argument\
  * baboon.png\
  * sunflowers.png\
  * earth.png\
  * penguins.png\
==> passed\
\
Test 28: check that laplacian() does not mutate Picture argument\
  * baboon.png\
  * sunflowers.png\
  * earth.png\
  * penguins.png\
==> passed\
\
Test 29: check that emboss() does not mutate Picture argument\
  * baboon.png\
  * sunflowers.png\
  * earth.png\
  * penguins.png\
==> passed\
\
Test 30: check that motionBlur() does not mutate Picture argument\
  * baboon.png\
  * sunflowers.png\
  * earth.png\
  * penguins.png\
==> passed\
\
\
KernelFilter Total: 24/30 tests passed!\
\
\
================================================================}